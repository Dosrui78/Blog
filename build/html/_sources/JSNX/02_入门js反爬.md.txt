#### 5.2 入门级JS反爬

##### 1. 加密参数直接出现

 ![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.21.png)

这种带翻页的，打开fiddler，查看翻页会有哪些参数变化，然后进行堆栈查找

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.21-1.png)

可发现m是变化的，cookie是不变的，于是可以确定是参数m动了手脚，因为返回数据是json格式的，我们可以打XHR断点去观察。

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.21-2.png)

可以看到m直接就映入眼帘，m是通过base64加密后得到，而且是未经魔改的btoa，可以直接用python自带的base64编码库来执行。代码如下：

```
import base64
for page in range(1, 6):
    data = {
        'page': page,
        'm': base64.b64encode(('yuanrenxue' + str(page)).encode('utf-8')).decode('utf8')
    }
```

或者用js中的base64方法：

```
for(i = 1;i< 6;i++){
    m = new Buffer.from(('yuanrenxue' + i), "binary").toString("base64")
}
```

-----

##### 2. 入门级cookie反爬

在抓包找加密参数的时候，fiddler中webForms啥都没有，cookies中发现这么段奇怪代码：

```
yuanrenxue_cookie=1637043175|YT6lsXhFR2vSKWc4ZCEpeRYwPzco3XKQSAAD5kn8fQuQpE0CPhyjRlBqS7qzuTIbZc6IiTv9IUqK4cCbGiNGCoZInCtnVtQD3MRwJVULGAsguM702mqPskkoWxHQ8fOktadPXtjlXSFcvJMANNCl7S3sGpPG2JxJptbr3tM9DwoEk
```

由此判断反爬出现在cookies中，我们发现一个包中返回的数据居然是

```
<script>document.cookie=('y')+('u')+('a')+('n')+('r')+('e')+('n')+('x')+('u')+('e')+('_')+('c')+('o')+('o')+('k')+('i')+('e')+('=')+('1')+('6')+('3')+('7')+('0')+('4')+('3')+('2')+('0')+('5')+('|')+('v')+('V')+('B')+('z')+('2')+('m')+('V')+('I')+('B')+('R')+('7')+('G')+('I')+('A')+('e')+('h')+('h')+('3')+('U')+('A')+('S')+('b')+('V')+('M')+('H')+('0')+('y')+('b')+('v')+('M')+('t')+('N')+('1')+('6')+('z')+('h')+('M')+('Z')+('m')+('p')+('F')+('d')+('8')+('U')+('D')+('n')+('m')+('p')+('k')+('g')+('w')+('h')+('P')+('M')+('z')+('j')+('B')+('s')+('X')+('1')+('z')+('8')+('g')+('h')+('q')+('I')+('l')+('m')+('s')+('u')+('e')+('6')+('y')+('t')+('x')+('u')+('N')+('O')+('h')+('c')+('k')+('N')+('t')+('6')+('k')+('H')+('r')+('O')+('R')+('y')+('S')+('z')+('f')+('l')+('U')+('h')+('G')+('H')+('Q')+('0')+';path=/';location.href=location.pathname+location.search</script>
```

在控制台运行得到如下结果（前提是要去掉location.search那些杂鱼）

```
"yuanrenxue_cookie=1637043205|vVBz2mVIBR7GIAehh3UASbVMH0ybvMtN16zhMZmpFd8UDnmpkgwhPMzjBsX1z8ghqIlmsue6ytxuNOhckNt6kHrORySzflUhGHQ0;path=/"
```

原来这就是加密逻辑，可以重新构建cookie来获取数据（部分代码如下）

```
# 先请求主页获取上述乱代码
response = self.session.get('https://match.yuanrenxue.com/match/13', cookies={'sessionid': self.sessionid})


# 这里写的js代码要套三层括号保住python代码
text = f'''
    location = new Object();
    document = new Object();
    function a(){{
    {re.match("<script>(.*?)</script>", response.content.decode()).group(1)}
    return document.cookie 
}}
'''
cookie = execjs.compile(text).call('a')      
```

##### 3. 简单请求头参数加密

当webForms出现的并没有加密参数，就要边翻页边找规律，发现safe是加密参数，一直在变

于是打script断点后一直F8调到1界面，搜索safe发现逻辑显而易见，然后对这些加密逻辑打上断点

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.23.png)

这个setRequestHeader函数不认识也没关系，搜了一下就相当于赋值（设置请求头部）

两种方法：

- 自己根据js来构建

  ```
  text = """
  function a() {
      var a = '9622';
      var md5 = require("md5");
      var timestamp = String(Date.parse(new Date()) / 1000);
      var tokens = md5(Buffer.from(a+timestamp).toString("base64"));
      return [timestamp,tokens];
      }
  """
  timestamp, tokens = execjs.compile(text).call("a")
  ```

- 抠js代码

  此处省略一千字

- 由于md5是没有魔改的，第一种方法是用nodejs带的md5方法，也可以用python的md5

  ```
  import hashlib
  timestamp, tokens = execjs.compile(text).call("a")
  h1 = hashlib.md5()
  h1.update(tokens.encode(encoding='utf-8'))
  result_tokens = h1.hexdigest()
  ```

----



##### 4. 简单js动态加密解析

打个scripct断点，然后一直f8前进到有js的界面

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.24-1.png)

如果不是这个界面，删除Application里cookie的sign重头来一次直到进入到这个界面，因为和时间有关，多半是date，于是搜索date就可以找到加密参数的位置，然后全部打上断点。![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.24-2.png)

再f8发现出现debugger，可以用never pause过了；然后单步调试到如下界面：

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.24-3.png)

接下来是抠代码环节，一步步抠就完事了，btoa，atob可以用nodejs的模块导入。

```
atob = require('atob')
btoa = require('btoa')
```

document[xxxxx]就是document.cookie.

-----------

Tips：如果抠代码时代码明明是缺啥补啥但还是报如下错误可能是因为代码格式化导致的，此时可在代码压缩网站<https://www.sojson.com/yasuojs.html>将代码压缩后解决

![img](https://dosrui.oss-cn-guangzhou.aliyuncs.com/img/4.24-4.jpg)

---------

##### 

